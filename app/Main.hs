module Main where

import System.Environment
import qualified Data.ByteString.Lazy.Char8 as B
import RSA (encrypt, decrypt)
import PipeLine (pipeline)

main :: IO () 
main = do
  [cmd,f] <- getArgs
  text <- case f of
            "-" -> B.getContents
            _   -> B.readFile f
  case cmd of
    "encrypt" -> B.putStr (encrypt n e text)
    "decrypt" -> B.putStr (decrypt n d text)
    "pipeline" -> B.putStr (pipeline n e d text)


-- example keys, created by makeKey 
n, d, e :: Integer
(n,d,e) = (3539517541822645630044332546732747854710141643130106075585179940882036712515975698104695392573887034788933523673604280427152984392565826058380509963039612419361429882234327760449752708861159361414595229,121492527803044541056704751360974487724009957507650761043424679483464778334890045929773805597614290949,216244483337223224019000724904989828660716358310562600433314577442746058361727768326718965949745599136958260211917551718034992348233259083876505235987999070191048638795502931877693189179113255689722281)
